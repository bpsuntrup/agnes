roles:
* create
	* must be admin
	* must be logged in
	* must include valid permissions
* read
	* must have admin to see all
	* must be logged in
	* may see your own if not admin
* update
	* must be admin
	* must be logged in
	* must include valid permissions
* delete
	* must be admin
	* must be logged in

attributes:
* create
	* must be admin
	* must be logged in
	* must have valid types (date, enum, text, etc)
* read
	* must be logged in
* update
	* must be admin
	* must be logged in
* delete
	* must be admin
	* must be logged in

user_types:
* create
	* must have admin
	* must be logged in
* read
	* must be logged in
* update
	* add or remove attributes
	* must be admin
	* must be logged in
* delete
	* must be admin
	* must be logged in

users:
* read users
	* search for users by attribute
	* must be logged in

spaces
    * create
        * must have permission to create top level space (with no parent)
        * must have space permission (spermission? yuck) to create subspace
        * creator is owner
    * read
        * list spaces visible to me
            * all spaces of which I am a member are visible
            * all superspaces of all spaces of which I am a member are visible
            * all subspaces with visibility = visible of spaces of which I am a member are visible
            * all spaces I own and all of their subspaces regardless of visiblitiy are visible
            * all spaces I have space permissions to see are visible
            * all subspaces of spaces I have space permissions to see subspaces of are visible
            * admins can see all spaces
    * update
        * change owner
            * must be admin or owner or owner of superspace or have space permissions in current space or superspace
        * change name
            * must be admin or owner or owner of superspace or have space permissions in current space or superspace
        * change visibility
            * must be admin or owner or owner of superspace or have space permissions in current space or superspace
        * change parent
            * not supported. Delete it and create a new space.
    * delete
        * must be admin or owner or owner of superspace or have space permissions in current space or superspace
    * tables:
        * space_permissions
            * space_permission_id
            * permission (text)
                * can create subgroup
                * can change owner
                * can change name
                * can change visibility
                * can change parent
                * can post message
                * can delete other people's messages
                * can pin message
                * can add someone to space
                * can remove someone from space
                * can change someone's space role
                * can see the group?
                * can read message?
        * space_role_permissions
            space_roles <-> space_permissions
        * space_roles
            * role_name
                * space_admin (equal to owner)
                * member (read and post)
                * lurker (read)
                * chatter (space is a DM chat)
                * possbily more in the future, possibly admin-created
        * space_members
            * account_id, space_id, space_role_id
    * concepts:
        * each member of a space has exactly one role
        * each role has many permissions allowing a member to do different things
        * each space can have a subspace
        * subspaces are visible/invisible to members of the superspace based on perms and
          space settings
        * subspaces are also open to superspace members to join, or closed without invite
            * hence 4 types of subspaces, visibl/invisible X open/closed

posts
...

files
...

Done:
=====
users:
    * create users
        * guarded by user_create role
            * errors when user without user_create or admin does it
        * must require required attributes
            * errors when not all required attributes are provided
        * must reject when invalid attributes
            * invalid, because not on type
            * invalid, because wrong type
        * must be logged in
    * delete users
        * must be logged in
        * must have admin or user_delete role
            * errors when not
        * must delete all user_attributes too
        * user must be left in system with only username and null password, and "deleted" user type
    * update users
        * must be logged in
        * must require required attributes
            * cannot set required attribute to empty
        * must reject when invalid attributes
            * invalid, because not on type
            * invalid, because wrong type

Order of development:

The order of this app's development shall proceed in the form of a story.

When you set a new tenant up, you manually add a tenants row, account_types row, and an accounts
row to the database with is_admin set to 1.

That's all that's needed to exercise all of the rest of the functionality of the app.

Therefore, I want my full integration test to start with those three rows, and then proceed to
exercise the entire app by doing the following, which is also the order in which I will 
develop the app:

* login
* create user
* create space
* get users GET /accounts?query='attribute_name (like, is, in) (value/s) (and/or), etc.
* get spaces GET /spaces?query='something'
* add user to space PUT /accounts/<account_id>/spaces/<space_id>
* get spaces (belonging to user) GET /accounts/<id>/spaces
* create post POST /spaces/<space_id>/posts
* create reactions POST /posts/<post_id>/reactions
* get posts GET /spaces/<space_id>/posts

Furthermore, I should really focus on only building the happy path first. Once the happy path is done,
I will have something that can be demoed, and something that the front-end can be built on.

I need to add failing tests for the sad path for each route as a reminder to go back and harden up
every route.

I need to pivot to starting to test Biz class methods. I will start with all of the methods
needed to actually do a full integration test run (add user, create role with privs, add role to user,
create space, add user to space, create space role with privs, add space role to user)
but test all of these only on the happy path and only the biz class. Then use these biz methods
to set up test cases in other tests. Then build a whole HOUSE OF CARDS with just happy path tests!


